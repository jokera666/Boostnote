type: "MARKDOWN_NOTE"
folder: "c933a741eb80cf546f4d"
title: "&x2623; -=[ Comandos Git ]=- &#x2623;"
content: '''
  # &#x2623; -=[ Comandos Git ]=- &#x2623;
  
  ## Esquema basico de la logica de Git
  
  ![Image](https://hackadaycom.files.wordpress.com/2017/04/flowgit.png)
  
  
  ## Configuracion de cuenta Git 
  ---
  
  ### Configuracion global
  Establecer nombre del usuario: `git config --global user.name "Nestor"`
  Establecer e-mail del usuario: `git config --global user.mail "correo@gmail.com"`
  Añadir Sublime (para Windows) como editor de texto para git: `git config --global core.editor "'c:/program files/sublime text 3/subl.exe' -w"`
  Añadir Sublime (para Linux) como editor de texto para git: `git config --global core.editor "subl -n -w"`
  Ver la configuracion de Git: `git config --list`
  Dar un alias a un comando de git: (Pj: git status): `git config --global alias.st status`
  ### Configuracion remota
  Asignacion del repositorio remoto: `git remote add origin https://github.com/nestoredrev/API-RESTfull-nodejs`
  Editar el repositorio remoto: `git remote set-url https://github.com/nestoredrev/API-RESTfull-nodejs`
  Ver el destino origin del repositorio remoto: `git remote -v`
  
  ---
  ## Comandos basicos
  
  Clonar repositorio asignandole en un directorio concreto: `git clone https://github.com/jokera666/FavoritosOnline.git Favoritos`
  Iniciar un directorio como proyecto de Git: `git init`
  Para ignorar fichero que no queremos que sean afectados por git, como ficheros de configuracion, añadimos su ruta en el fichero oculto de git `.gitignore`
  Ver el estado del repositorio (Los ficheros que se han modificado): `git status`
  Ver el estado del repositorio en caso de que se llena el baffer del terminal: `git status | cat`
  Exportar la salida de un comando en txt (pj: git log): `git log > logRepo.txt`
  Ver los cambios realizados: `git diff`
  Seleccionar todos ficheros modificados para añadir en el commit: `git add .`
  Deshacer un fichero que fue añadido en el Storage con el comando add: `git reset HEAD <ruta del fichero>`
  Seleccionar los ficheros con un menu interactivo: `git add -i`
  Seleccionar un fichero en concreto para añadir en el commit: `git add <nombre de fichero>`
  Para eliminar un fichero que no queremos que aparezca en el commit: `git checkout <nombre de fichero>`
  Para eliminar los ficheros (f) y directorios (d) untracked: `git clean -fd`
  Para comentar los ficheros y añadir una descripcion a subir en el repositorio: `git commit -m <titulo del commit> -m <descripcion del commit>`
  Añade todos los ficheros a commitear automaticame y describir el commit: `git commit -am <titulo del commit> -m <descripcion del commit>`
  Para subir el commit al repositorio: `git push`
  Para bajar los cambios (actualizar el repositorio) que se han echo en el repositorio: `git pull`
  Crear una rama y moverte en ella: `git checkout -b <nombre de la rama>`
  Eliminar una rama en local(estando en ella): `git branch -d <nombre de la rama>`
  Moverte en otra rama: `git checkout <nombre de la rama>`
  Antes de realizar una fusion de tu rama con master hay que hacer un pull del master. Para eso hay que cambiarte a la rama de master hacer el pull y fusionar tu rama con la de master: `git merge <nombre de la rama>` y luego hay que subir los cambios: `git push`
  Para abortar un merge cuando aparece asi _I-5672|MERGING_: `git merge --abort`
  Renombrar una rama(estando en ella): `git branch -m <nuevo nombre>`
  Ver la URL donde esta alojado el repositorio: `git remote -v`
  
  
  ---
  ## Comandos informativos
  La ayuda de git: `git --help`
  Obtener informacion de un comando dado:(Pj: el comando init): `git --help init` 
  Historia confirmada del repositorio: `git log`
  Obtener los ultimos tres commits: `git log -n 3`
  Obtener Acciones(pull, push, merge) realizados en el repositorio: `git reflog --date=iso`
  Obtener el hash y el nombre el commit en una sola linea: `git log --oneline`
  Historia confirmada del repositorio mas los ficheros tocados en cada commit: `git log --stat`
  Historia de los commits realizados por un autor en concreto: `git log --author="Nestor"`
  Añade en la Historia el nombre de las rammas de los commits: `git log --decorate`
  
  Ver el ultimo commit del repositorio: `git show --summary`
  Ver commit a partir del id(hash corto) con el diff de los cambios de los ficheros modificados: `git show <commit id>`
  Ver commit partir del hash junto con los ficheros modificados ` git show --name-only <commit id>
  ` 
  Ver el culpable de una de un rango de lineas: `git blame -L 50,55 <ruta fichero>`
  Ver el culpable a partir de una linea en concreto mas 50 lineas mas: `git blame -L 10,+50 <ruta fichero>`
  
  ---
  ## Comandos informativos para Ramas
  Ver todos los commits en una rama concreta con los ficheros modificados en cada commit: `git log <nombre de la rama> --not master --name-only` o `git log --walk-reflogs --name-only <nombre de la rama>`
  Obtener una lista de tus ramas locales: `git branch`
  Ver las ramas que se han mergeado/fusionado en master: `git branch --merged master`
  Ver las ramas que NO se han mergeado/fusionado en master: `git branch --no-merged master`
  Ver un commit a que rama pertenece: `git branch --contains <hash del commit>`
  
  ---
  ## Guardado rapido Stash
  El *Stash* de git es un guardado rapido de cambios que estan a medios en tu repositorio local. *Stash*  su utilides es para cuando necesitas moverte a otra rama y no quieres comitear los cambios realizadas que estan a medias, simplemente los almacenas en sucio y cuando vuelves a la rama los recuperas.
  
  Almacenar cambios a sucio: `git stash`
  Recuperar cambios del stash: `git stash apply`
  Borrar el stash una vez terminado el trabajo en la rama: `git stash drop`
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-20T08:33:20.745Z"
updatedAt: "2018-12-04T15:26:05.484Z"
